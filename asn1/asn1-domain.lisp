;;; This file was generated by Zebu (Version 3.5.5)

(IN-PACKAGE "SNMP")
(REQUIRE "zebu-package")
(USE-PACKAGE "ZEBU")

(DEFSTRUCT (OBJ-ID-COMPONENT
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION
             (LAMBDA
                 (ITEM STREAM LEVEL &AUX
                  (%R (OBJ-ID-COMPONENT-NAME ITEM))
                  (%S (OBJ-ID-COMPONENT-VALUE ITEM)))
               (DECLARE (IGNORE LEVEL))
               (FORMAT STREAM "~a(~a)" %R %S))))
  NAME
  VALUE)

(DEFSTRUCT (OBJECT-IDENTIFIER-VALUE
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION
             (LAMBDA
                 (ITEM STREAM LEVEL &AUX
                  (%R (OBJECT-IDENTIFIER-VALUE-VALUE ITEM)))
               (DECLARE (IGNORE LEVEL))
               (FORMAT STREAM
                       "{~a}"
                       (LET ((OBJ-ID-COMPONENT+ %R))
                         (IF (NULL OBJ-ID-COMPONENT+)
                             ""
                           (ZEBU::KB-SEQUENCE-PRINT OBJ-ID-COMPONENT+
                                                    NIL
                                                    NIL)))))))
  VALUE)

(DEFSTRUCT (VALUE-ASSIGNMENT
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION GENERATE-PRINT-FUNCTION))
  NAME
  TYPE
  VALUE)

(DEFSTRUCT (ASSIGNMENT
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION GENERATE-PRINT-FUNCTION))
  TYPE
  VALUE)

(DEFSTRUCT (SYMBOLS-FROM-MODULE
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION
             (LAMBDA
                 (ITEM STREAM LEVEL &AUX
                  (%R (SYMBOLS-FROM-MODULE-SYMBOLS ITEM))
                  (%S
                   (SYMBOLS-FROM-MODULE-GLOBAL-MODULE-REFERENCE ITEM)))
               (DECLARE (IGNORE LEVEL))
               (FORMAT STREAM
                       "~a FROM ~a"
                       (LET ((SYMBOL+\,1$ %R))
                         (IF (NULL SYMBOL+\,1$)
                             ""
                           (LET ((*KB-SEQUENCE-SEPARATOR* ","))
                             (DECLARE (SPECIAL
                                       *KB-SEQUENCE-SEPARATOR*))
                             (ZEBU::KB-SEQUENCE-PRINT SYMBOL+\,1$
                                                      NIL
                                                      NIL))))
                       %S))))
  SYMBOLS
  GLOBAL-MODULE-REFERENCE)

(DEFSTRUCT (IMPORTS
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION
             (LAMBDA (ITEM STREAM LEVEL &AUX (%R (IMPORTS-LIST ITEM)))
               (DECLARE (IGNORE LEVEL))
               (FORMAT STREAM
                       "IMPORTS ~a;"
                       (LET ((SYMBOLS-FROM-MODULE* %R))
                         (ZEBU::KB-SEQUENCE-PRINT SYMBOLS-FROM-MODULE*
                                                  NIL
                                                  NIL))))))
  (LIST NIL :TYPE (OR NULL KB-SEQUENCE))
  VALID)

(DEFSTRUCT (EXPORTS
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION
             (LAMBDA (ITEM STREAM LEVEL &AUX (%R (EXPORTS-LIST ITEM)))
               (DECLARE (IGNORE LEVEL))
               (COND ((KB-SEQUENCE-P %R)
                      (FORMAT STREAM
                              "EXPORTS ~a;"
                              (LET ((SYMBOL*\,1$ %R))
                                (LET ((*KB-SEQUENCE-SEPARATOR* ","))
                                  (DECLARE (SPECIAL
                                            *KB-SEQUENCE-SEPARATOR*))
                                  (ZEBU::KB-SEQUENCE-PRINT SYMBOL*\,1$
                                                           NIL
                                                           NIL)))))
                     (T (FORMAT STREAM "EXPORTSALL;"))))))
  (LIST NIL :TYPE (OR NULL KB-SEQUENCE))
  ALL-EXPORTS)

(DEFSTRUCT (MODULE-BODY
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION
             (LAMBDA
                 (ITEM STREAM LEVEL &AUX
                  (%R (MODULE-BODY-EXPORTS ITEM))
                  (%S (MODULE-BODY-IMPORTS ITEM))
                  (%T (MODULE-BODY-ASSIGNMENT-LIST ITEM)))
               (DECLARE (IGNORE LEVEL))
               (FORMAT STREAM
                       "~a ~a ~a"
                       %R
                       %S
                       (LET ((ASSIGNMENT* %T))
                         (ZEBU::KB-SEQUENCE-PRINT ASSIGNMENT*
                                                  NIL
                                                  NIL))))))
  EXPORTS
  IMPORTS
  (ASSIGNMENT-LIST NIL :TYPE (OR NULL KB-SEQUENCE)))

(DEFSTRUCT (MODULE-DEFINITION
            (:INCLUDE KB-DOMAIN)
            (:PRINT-FUNCTION
             (LAMBDA
                 (ITEM STREAM LEVEL &AUX
                  (%R (MODULE-DEFINITION-IDENTIFIER ITEM))
                  (%S (MODULE-DEFINITION-BODY ITEM)))
               (DECLARE (IGNORE LEVEL))
               (FORMAT STREAM "~a DEFINITIONS::=BEGIN ~a END" %R %S))))
  IDENTIFIER
  BODY)

(DEFUN ASSIGNMENT*63 (ASSIGNMENT ASSIGNMENT*)
  (MAKE-KB-SEQUENCE :FIRST ASSIGNMENT :REST ASSIGNMENT*))

(DEFUN SYMBOL*\,1$64 (SYMBOL |Rest-SYMBOL*,1$|)
  (MAKE-KB-SEQUENCE :FIRST SYMBOL :REST |Rest-SYMBOL*,1$|))

(DEFUN |Rest-SYMBOL*,1$65| (DUMMY SYMBOL |Rest-SYMBOL*,1$|)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST SYMBOL :REST |Rest-SYMBOL*,1$|))

(DEFUN SYMBOLS-FROM-MODULE*66
       (SYMBOLS-FROM-MODULE SYMBOLS-FROM-MODULE*)
  (MAKE-KB-SEQUENCE :FIRST
                    SYMBOLS-FROM-MODULE
                    :REST
                    SYMBOLS-FROM-MODULE*))

(DEFUN SYMBOL+\,1$67 (SYMBOL) (MAKE-KB-SEQUENCE :FIRST SYMBOL))

(DEFUN SYMBOL+\,1$68 (SYMBOL DUMMY SYMBOL+\,1$)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST SYMBOL :REST SYMBOL+\,1$))

(DEFUN GARBAGE+69 (GARBAGE) (MAKE-KB-SEQUENCE :FIRST GARBAGE))

(DEFUN GARBAGE+70 (GARBAGE GARBAGE+)
  (MAKE-KB-SEQUENCE :FIRST GARBAGE :REST GARBAGE+))

(DEFUN MODULE-REVISION*71 (MODULE-REVISION MODULE-REVISION*)
  (MAKE-KB-SEQUENCE :FIRST MODULE-REVISION :REST MODULE-REVISION*))

(DEFUN IDENTIFIER+\,1$72 (IDENTIFIER)
  (MAKE-KB-SEQUENCE :FIRST IDENTIFIER))

(DEFUN IDENTIFIER+\,1$73 (IDENTIFIER DUMMY IDENTIFIER+\,1$)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST IDENTIFIER :REST IDENTIFIER+\,1$))

(DEFUN MODULE-COMPLIANCE-BODY+74 (MODULE-COMPLIANCE-BODY)
  (MAKE-KB-SEQUENCE :FIRST MODULE-COMPLIANCE-BODY))

(DEFUN MODULE-COMPLIANCE-BODY+75
       (MODULE-COMPLIANCE-BODY MODULE-COMPLIANCE-BODY+)
  (MAKE-KB-SEQUENCE :FIRST
                    MODULE-COMPLIANCE-BODY
                    :REST
                    MODULE-COMPLIANCE-BODY+))

(DEFUN OBJECT-TYPE-INDEX-VALUE+\,1$76 (OBJECT-TYPE-INDEX-VALUE)
  (MAKE-KB-SEQUENCE :FIRST OBJECT-TYPE-INDEX-VALUE))

(DEFUN OBJECT-TYPE-INDEX-VALUE+\,1$77
       (OBJECT-TYPE-INDEX-VALUE DUMMY OBJECT-TYPE-INDEX-VALUE+\,1$)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST
                    OBJECT-TYPE-INDEX-VALUE
                    :REST
                    OBJECT-TYPE-INDEX-VALUE+\,1$))

(DEFUN IDENTIFIER*\,1$78 (IDENTIFIER |Rest-IDENTIFIER*,1$|)
  (MAKE-KB-SEQUENCE :FIRST IDENTIFIER :REST |Rest-IDENTIFIER*,1$|))

(DEFUN |Rest-IDENTIFIER*,1$79| (DUMMY IDENTIFIER |Rest-IDENTIFIER*,1$|)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST IDENTIFIER :REST |Rest-IDENTIFIER*,1$|))

(DEFUN MODULE-COMPLIANCE-ITEM*80
       (MODULE-COMPLIANCE-ITEM MODULE-COMPLIANCE-ITEM*)
  (MAKE-KB-SEQUENCE :FIRST
                    MODULE-COMPLIANCE-ITEM
                    :REST
                    MODULE-COMPLIANCE-ITEM*))

(DEFUN OBJ-ID-COMPONENT+81 (OBJ-ID-COMPONENT)
  (MAKE-KB-SEQUENCE :FIRST OBJ-ID-COMPONENT))

(DEFUN OBJ-ID-COMPONENT+82 (OBJ-ID-COMPONENT OBJ-ID-COMPONENT+)
  (MAKE-KB-SEQUENCE :FIRST OBJ-ID-COMPONENT :REST OBJ-ID-COMPONENT+))

(DEFUN NUMBERS+\|1$83 (NUMBERS) (MAKE-KB-SEQUENCE :FIRST NUMBERS))

(DEFUN NUMBERS+\|1$84 (NUMBERS DUMMY NUMBERS+\|1$)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST NUMBERS :REST NUMBERS+\|1$))

(DEFUN SPLITED-NUMBERS+\|1$85 (SPLITED-NUMBERS)
  (MAKE-KB-SEQUENCE :FIRST SPLITED-NUMBERS))

(DEFUN SPLITED-NUMBERS+\|1$86
       (SPLITED-NUMBERS DUMMY SPLITED-NUMBERS+\|1$)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST SPLITED-NUMBERS :REST SPLITED-NUMBERS+\|1$))

(DEFUN NAMED-NUMBER+\,1$87 (NAMED-NUMBER)
  (MAKE-KB-SEQUENCE :FIRST NAMED-NUMBER))

(DEFUN NAMED-NUMBER+\,1$88 (NAMED-NUMBER DUMMY NAMED-NUMBER+\,1$)
  (DECLARE (IGNORE DUMMY))
  (MAKE-KB-SEQUENCE :FIRST NAMED-NUMBER :REST NAMED-NUMBER+\,1$))

(DEFUN GARBAGE*89 (GARBAGE GARBAGE*)
  (MAKE-KB-SEQUENCE :FIRST GARBAGE :REST GARBAGE*))

(DEFUN NAME-AND-NUMBER-FORM90 (IDENTIFIER DUMMY NUMBER-FORM DUMMY1)
  (DECLARE (IGNORE DUMMY1 DUMMY))
  (MAKE-OBJ-ID-COMPONENT :NAME IDENTIFIER :VALUE NUMBER-FORM))

(DEFUN OBJECT-IDENTIFIER-VALUE91 (DUMMY OBJ-ID-COMPONENT+ DUMMY1)
  (DECLARE (IGNORE DUMMY1 DUMMY))
  (MAKE-OBJECT-IDENTIFIER-VALUE :VALUE OBJ-ID-COMPONENT+))

(DEFUN VALUE-ASSIGNMENT92 (IDENTIFIER TYPE DUMMY VALUE)
  (DECLARE (IGNORE DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME IDENTIFIER :TYPE TYPE :VALUE VALUE))

(DEFUN VALUE-ASSIGNMENT93
       (IDENTIFIER DUMMY DUMMY1 STATUS DUMMY2 DESCRIPTION
        OBJECT-IDENTITY-REFERENCE DUMMY3 OBJECT-IDENTIFIER-VALUE)
  (DECLARE (IGNORE DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME
                         IDENTIFIER
                         :TYPE
                         :OBJECT-IDENTITY
                         :VALUE
                         OBJECT-IDENTIFIER-VALUE))

(DEFUN VALUE-ASSIGNMENT94
       (IDENTIFIER DUMMY DUMMY1 LAST-UPDATED DUMMY2 ORGANIZATION DUMMY3
        CONTACT-INFO DUMMY4 DESCRIPTION MODULE-REVISION* DUMMY5
        OBJECT-IDENTIFIER-VALUE)
  (DECLARE (IGNORE DUMMY5 DUMMY4 DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME
                         IDENTIFIER
                         :TYPE
                         :MODULE-IDENTITY
                         :VALUE
                         OBJECT-IDENTIFIER-VALUE))

(DEFUN VALUE-ASSIGNMENT95
       (IDENTIFIER DUMMY DUMMY1 TYPE OBJECT-TYPE-UNITS
        OBJECT-TYPE-ACCESS DUMMY2 STATUS DUMMY3 DESCRIPTION
        OBJECT-TYPE-INDEX OBJECT-TYPE-AUGMENTS OBJECT-TYPE-REFERENCE
        OBJECT-TYPE-DEFVAL DUMMY4 OBJECT-IDENTIFIER-VALUE)
  (DECLARE (IGNORE DUMMY4 DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME
                         IDENTIFIER
                         :TYPE
                         :OBJECT-TYPE
                         :VALUE
                         OBJECT-IDENTIFIER-VALUE))

(DEFUN VALUE-ASSIGNMENT96
       (IDENTIFIER DUMMY NOTIFICATION-TYPE-OBJECTS DUMMY1 STATUS DUMMY2
        DESCRIPTION DUMMY3 OBJECT-IDENTIFIER-VALUE)
  (DECLARE (IGNORE DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME
                         IDENTIFIER
                         :TYPE
                         :NOTIFICATION-TYPE
                         :VALUE
                         OBJECT-IDENTIFIER-VALUE))

(DEFUN VALUE-ASSIGNMENT97
       (IDENTIFIER DUMMY DUMMY1 DUMMY2 IDENTIFIER+\,1$ DUMMY3 DUMMY4
        STATUS DUMMY5 DESCRIPTION DUMMY6 OBJECT-IDENTIFIER-VALUE)
  (DECLARE (IGNORE DUMMY6 DUMMY5 DUMMY4 DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME
                         IDENTIFIER
                         :TYPE
                         :NOTIFICATION-GROUP
                         :VALUE
                         OBJECT-IDENTIFIER-VALUE))

(DEFUN VALUE-ASSIGNMENT98
       (IDENTIFIER DUMMY DUMMY1 STATUS DUMMY2 DESCRIPTION
        MODULE-COMPLIANCE-BODY+ DUMMY3 OBJECT-IDENTIFIER-VALUE)
  (DECLARE (IGNORE DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME
                         IDENTIFIER
                         :TYPE
                         :MODULE-COMPLIANCE
                         :VALUE
                         OBJECT-IDENTIFIER-VALUE))

(DEFUN VALUE-ASSIGNMENT99
       (IDENTIFIER DUMMY DUMMY1 DUMMY2 IDENTIFIER+\,1$ DUMMY3 DUMMY4
        STATUS DUMMY5 DESCRIPTION DUMMY6 OBJECT-IDENTIFIER-VALUE)
  (DECLARE (IGNORE DUMMY6 DUMMY5 DUMMY4 DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-VALUE-ASSIGNMENT :NAME
                         IDENTIFIER
                         :TYPE
                         :OBJECT-GROUP
                         :VALUE
                         OBJECT-IDENTIFIER-VALUE))

(DEFUN ASSIGNMENT100 (TYPE-ASSIGNMENT)
  (MAKE-ASSIGNMENT :TYPE :TYPE :VALUE TYPE-ASSIGNMENT))

(DEFUN ASSIGNMENT101 (VALUE-ASSIGNMENT)
  (MAKE-ASSIGNMENT :TYPE :VALUE :VALUE VALUE-ASSIGNMENT))

(DEFUN SYMBOLS-FROM-MODULE102
       (SYMBOL+\,1$ DUMMY GLOBAL-MODULE-REFERENCE)
  (DECLARE (IGNORE DUMMY))
  (MAKE-SYMBOLS-FROM-MODULE :SYMBOLS
                            SYMBOL+\,1$
                            :GLOBAL-MODULE-REFERENCE
                            GLOBAL-MODULE-REFERENCE))

(DEFUN IMPORTS103 (DUMMY SYMBOLS-FROM-MODULE* DUMMY1)
  (DECLARE (IGNORE DUMMY1 DUMMY))
  (MAKE-IMPORTS :VALID T :LIST SYMBOLS-FROM-MODULE*))

(DEFUN EXPORTS104 (DUMMY SYMBOL*\,1$ DUMMY1)
  (DECLARE (IGNORE DUMMY1 DUMMY))
  (MAKE-EXPORTS :LIST SYMBOL*\,1$))

(DEFUN EXPORTS105 (DUMMY DUMMY1 DUMMY2)
  (DECLARE (IGNORE DUMMY2 DUMMY1 DUMMY))
  (MAKE-EXPORTS :ALL-EXPORTS T))

(DEFUN MODULE-BODY106 (EXPORTS IMPORTS ASSIGNMENT*)
  (MAKE-MODULE-BODY :ASSIGNMENT-LIST
                    ASSIGNMENT*
                    :EXPORTS
                    EXPORTS
                    :IMPORTS
                    IMPORTS))

(DEFUN MODULE-DEFINITION107
       (MODULE-IDENTIFIER DUMMY DUMMY1 DUMMY2 MODULE-BODY DUMMY3)
  (DECLARE (IGNORE DUMMY3 DUMMY2 DUMMY1 DUMMY))
  (MAKE-MODULE-DEFINITION :IDENTIFIER
                          MODULE-IDENTIFIER
                          :BODY
                          MODULE-BODY))


(EVAL-WHEN (:COMPILE-TOPLEVEL)
  (UNLESS (MEMBER "zebu-regex" *MODULES* :TEST #'EQUAL)
    (WARN "Load the Zebu Compiler!")))
(DECLAIM (SPECIAL ZEBU::*REGEX-GROUPS* ZEBU::*REGEX-GROUPINGS*))
(DEFUN TYPE-REFERENCE
       (STRING &OPTIONAL (ZEBU::START 0) (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN
          (SETF ZEBU::*REGEX-GROUPINGS* 1)
          (BLOCK ZEBU::FINAL-RETURN
            (BLOCK ZEBU::COMPARE
              (LET ((ZEBU::INDEX ZEBU::START) (LENGTH ZEBU::END))
                (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                      (LIST ZEBU::INDEX NIL))
                (LET ((ZEBU::RANGE
                       #*0000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
                  (IF (>= ZEBU::INDEX LENGTH)
                      (RETURN-FROM ZEBU::COMPARE NIL))
                  (IF (= 1
                         (SBIT ZEBU::RANGE
                               (CHAR-CODE (CHAR STRING ZEBU::INDEX))))
                      (INCF ZEBU::INDEX)
                    (RETURN-FROM ZEBU::COMPARE NIL)))
                (LET ((ZEBU::OINDEX ZEBU::INDEX))
                  (BLOCK ZEBU::COMPARE
                    (DO ()
                        (NIL)
                      (LET ((ZEBU::RANGE
                             #*0000000000000000000000000000000000000000000001001111111111000000011111111111111111111111111000000111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
                        (IF (>= ZEBU::INDEX LENGTH)
                            (RETURN-FROM ZEBU::COMPARE NIL))
                        (IF (= 1
                               (SBIT ZEBU::RANGE
                                     (CHAR-CODE (CHAR STRING
                                                      ZEBU::INDEX))))
                            (INCF ZEBU::INDEX)
                          (RETURN-FROM ZEBU::COMPARE NIL)))))
                  (DO ((ZEBU::START ZEBU::INDEX (1- ZEBU::START)))
                      ((< ZEBU::START ZEBU::OINDEX) NIL)
                    (LET ((ZEBU::INDEX ZEBU::START))
                      (BLOCK ZEBU::COMPARE
                        (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                              ZEBU::INDEX)
                        (RETURN-FROM ZEBU::FINAL-RETURN T)))))))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN SIGNED-NUMBER
       (STRING &OPTIONAL (ZEBU::START 0) (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN
          (SETF ZEBU::*REGEX-GROUPINGS* 1)
          (BLOCK ZEBU::FINAL-RETURN
            (BLOCK ZEBU::COMPARE
              (LET ((ZEBU::INDEX ZEBU::START) (LENGTH ZEBU::END))
                (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                      (LIST ZEBU::INDEX NIL))
                (PROGN
                  (BLOCK ZEBU::COMPARE
                    (IF (AND (< ZEBU::INDEX LENGTH)
                             (EQL (CHAR STRING ZEBU::INDEX) #\-))
                        (INCF ZEBU::INDEX)
                      (RETURN-FROM ZEBU::COMPARE NIL)))
                  T)
                (LET ((ZEBU::OINDEX ZEBU::INDEX))
                  (BLOCK ZEBU::COMPARE
                    (DO ()
                        (NIL)
                      (LET ((ZEBU::RANGE
                             #*0000000000000000000000000000000000000000000000001111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
                        (IF (>= ZEBU::INDEX LENGTH)
                            (RETURN-FROM ZEBU::COMPARE NIL))
                        (IF (= 1
                               (SBIT ZEBU::RANGE
                                     (CHAR-CODE (CHAR STRING
                                                      ZEBU::INDEX))))
                            (INCF ZEBU::INDEX)
                          (RETURN-FROM ZEBU::COMPARE NIL)))))
                  (DO ((ZEBU::START ZEBU::INDEX (1- ZEBU::START)))
                      ((< ZEBU::START ZEBU::OINDEX) NIL)
                    (LET ((ZEBU::INDEX ZEBU::START))
                      (BLOCK ZEBU::COMPARE
                        (LET ((ZEBU::RANGE
                               #*0000000000000000000000000000000000000000000000001111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
                          (IF (>= ZEBU::INDEX LENGTH)
                              (RETURN-FROM ZEBU::COMPARE NIL))
                          (IF (= 1
                                 (SBIT ZEBU::RANGE
                                       (CHAR-CODE (CHAR STRING
                                                        ZEBU::INDEX))))
                              (INCF ZEBU::INDEX)
                            (RETURN-FROM ZEBU::COMPARE NIL)))
                        (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                              ZEBU::INDEX)
                        (RETURN-FROM ZEBU::FINAL-RETURN T)))))))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN ANYTHING
       (STRING &OPTIONAL (ZEBU::START 0) (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN
          (SETF ZEBU::*REGEX-GROUPINGS* 1)
          (BLOCK ZEBU::FINAL-RETURN
            (BLOCK ZEBU::COMPARE
              (LET ((ZEBU::INDEX ZEBU::START) (LENGTH ZEBU::END))
                (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                      (LIST ZEBU::INDEX NIL))
                (LET ((ZEBU::OINDEX ZEBU::INDEX))
                  (BLOCK ZEBU::COMPARE
                    (DO ()
                        (NIL)
                      (LET ((ZEBU::RANGE
                             #*1111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111))
                        (IF (>= ZEBU::INDEX LENGTH)
                            (RETURN-FROM ZEBU::COMPARE NIL))
                        (IF (= 1
                               (SBIT ZEBU::RANGE
                                     (CHAR-CODE (CHAR STRING
                                                      ZEBU::INDEX))))
                            (INCF ZEBU::INDEX)
                          (RETURN-FROM ZEBU::COMPARE NIL)))))
                  (DO ((ZEBU::START ZEBU::INDEX (1- ZEBU::START)))
                      ((< ZEBU::START ZEBU::OINDEX) NIL)
                    (LET ((ZEBU::INDEX ZEBU::START))
                      (BLOCK ZEBU::COMPARE
                        (LET ((ZEBU::RANGE
                               #*1111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111))
                          (IF (>= ZEBU::INDEX LENGTH)
                              (RETURN-FROM ZEBU::COMPARE NIL))
                          (IF (= 1
                                 (SBIT ZEBU::RANGE
                                       (CHAR-CODE (CHAR STRING
                                                        ZEBU::INDEX))))
                              (INCF ZEBU::INDEX)
                            (RETURN-FROM ZEBU::COMPARE NIL)))
                        (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                              ZEBU::INDEX)
                        (RETURN-FROM ZEBU::FINAL-RETURN T)))))))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN HSTRING
       (STRING &OPTIONAL (ZEBU::START 0) (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN
          (SETF ZEBU::*REGEX-GROUPINGS* 1)
          (BLOCK ZEBU::FINAL-RETURN
            (BLOCK ZEBU::COMPARE
              (LET ((ZEBU::INDEX ZEBU::START) (LENGTH ZEBU::END))
                (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                      (LIST ZEBU::INDEX NIL))
                (IF (AND (< ZEBU::INDEX LENGTH)
                         (EQL (CHAR STRING ZEBU::INDEX) #\'))
                    (INCF ZEBU::INDEX)
                  (RETURN-FROM ZEBU::COMPARE NIL))
                (LET ((ZEBU::OINDEX ZEBU::INDEX))
                  (BLOCK ZEBU::COMPARE
                    (DO ()
                        (NIL)
                      (LET ((ZEBU::RANGE
                             #*0000000000000000000000000000000000000000000000001111111111000000011111100000000000000000000000000111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
                        (IF (>= ZEBU::INDEX LENGTH)
                            (RETURN-FROM ZEBU::COMPARE NIL))
                        (IF (= 1
                               (SBIT ZEBU::RANGE
                                     (CHAR-CODE (CHAR STRING
                                                      ZEBU::INDEX))))
                            (INCF ZEBU::INDEX)
                          (RETURN-FROM ZEBU::COMPARE NIL)))))
                  (DO ((ZEBU::START ZEBU::INDEX (1- ZEBU::START)))
                      ((< ZEBU::START ZEBU::OINDEX) NIL)
                    (LET ((ZEBU::INDEX ZEBU::START))
                      (BLOCK ZEBU::COMPARE
                        (IF (AND (< ZEBU::INDEX LENGTH)
                                 (EQL (CHAR STRING ZEBU::INDEX) #\'))
                            (INCF ZEBU::INDEX)
                          (RETURN-FROM ZEBU::COMPARE NIL))
                        (LET ((ZEBU::RANGE
                               #*0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
                          (IF (>= ZEBU::INDEX LENGTH)
                              (RETURN-FROM ZEBU::COMPARE NIL))
                          (IF (= 1
                                 (SBIT ZEBU::RANGE
                                       (CHAR-CODE (CHAR STRING
                                                        ZEBU::INDEX))))
                              (INCF ZEBU::INDEX)
                            (RETURN-FROM ZEBU::COMPARE NIL)))
                        (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                              ZEBU::INDEX)
                        (RETURN-FROM ZEBU::FINAL-RETURN T)))))))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))
