;;;; -*- Mode: Lisp -*-
;;;; $Id$

(in-package :snmp)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun ->string (object)
    (format nil "~A" object)))

;;; .iso.org.dod.internet.private.enterprises.lisp.common-lisp.lispSystem
(def-scalar-variable "lispImplementationType" (agent)
  (lisp-implementation-type))
(def-scalar-variable "lispImplementationVersion" (agent)
  (lisp-implementation-version))
(def-scalar-variable "lispLongSiteName" (agent)
  (long-site-name))
(def-scalar-variable "lispShortSiteName" (agent)
  (short-site-name))
(def-scalar-variable "lispMachineInstance" (agent)
  (machine-instance))
(def-scalar-variable "lispMachineType" (agent)
  (machine-type))
(def-scalar-variable "lispMachineVersion" (agent)
  (machine-version))
(def-scalar-variable "lispSoftwareType" (agent)
  (software-type))
(def-scalar-variable "lispSoftwareVersion" (agent)
  (software-version))
(def-scalar-variable "lispInternalRealTime" (agent)
  (get-internal-real-time))
(def-scalar-variable "lispInternalRunTime" (agent)
  (get-internal-run-time))
(def-scalar-variable "lispInternalTimeUnitsPerSecond" (agent)
  #.internal-time-units-per-second)
(def-scalar-variable "lispUniversalTime" (agent)
  (get-universal-time))

(def-listy-mib-table "lispFeatureName" (agent ids)
  (let* ((features *features*)
         (number-of-features (list-length features)))
    (if (null ids)
      number-of-features
      (when (plusp (car ids))
        (->string (nth (mod (1- (car ids)) number-of-features)
                       features))))))

(def-listy-mib-table "lispPackageName" (agent ids)
  (let* ((packages (list-all-packages))
         (number-of-packages (list-length packages)))
    (if (null ids)
      number-of-packages
      (when (plusp (car ids))
        (->string (package-name (nth (mod (1- (car ids)) number-of-packages)
                                     packages)))))))

(def-listy-mib-table "lispModuleName" (agent ids)
  (let* ((modules *modules*)
         (number-of-modules (list-length modules)))
    (if (null ids)
      number-of-modules
      (when (plusp (car ids))
        (->string (nth (mod (1- (car ids)) number-of-modules)
                       modules))))))

;;; .iso.org.dod.internet.private.enterprises.lisp.common-lisp.lispConstants
(def-scalar-variable "lispMostPositiveShortFloat" (agent)
  #.(->string most-positive-short-float))
(def-scalar-variable "lispLeastPositiveShortFloat" (agent)
  #.(->string least-positive-short-float))
(def-scalar-variable "lispLeastPositiveNormalizedShortFloat" (agent)
  #.(->string least-positive-normalized-short-float))
(def-scalar-variable "lispMostPositiveDoubleFloat" (agent)
  #.(->string most-positive-double-float))
(def-scalar-variable "lispLeastPositiveDoubleFloat" (agent)
  #.(->string least-positive-double-float))
(def-scalar-variable "lispLeastPositiveNormalizedDoubleFloat" (agent)
  #.(->string least-positive-normalized-double-float))
(def-scalar-variable "lispMostPositiveLongFloat" (agent)
  #.(->string most-positive-long-float))
(def-scalar-variable "lispLeastPositiveLongFloat" (agent)
  #.(->string least-positive-long-float))
(def-scalar-variable "lispLeastPositiveNormalizedLongFloat" (agent)
  #.(->string least-positive-normalized-long-float))
(def-scalar-variable "lispMostPositiveSingleFloat" (agent)
  #.(->string most-positive-single-float))
(def-scalar-variable "lispLeastPositiveSingleFloat" (agent)
  #.(->string least-positive-single-float))
(def-scalar-variable "lispLeastPositiveNormalizedSingleFloat" (agent)
  #.(->string least-positive-normalized-single-float))
(def-scalar-variable "lispMostNegativeShortFloat" (agent)
  #.(->string most-negative-short-float))
(def-scalar-variable "lispLeastNegativeShortFloat" (agent)
  #.(->string least-negative-short-float))
(def-scalar-variable "lispLeastNegativeNormalizedShortFloat" (agent)
  #.(->string least-negative-normalized-short-float))
(def-scalar-variable "lispMostNegativeSingleFloat" (agent)
  #.(->string most-negative-single-float))
(def-scalar-variable "lispLeastNegativeSingleFloat" (agent)
  #.(->string least-negative-single-float))
(def-scalar-variable "lispLeastNegativeNormalizedSingleFloat" (agent)
  #.(->string least-negative-normalized-single-float))
(def-scalar-variable "lispMostNegativeDoubleFloat" (agent)
  #.(->string most-negative-double-float))
(def-scalar-variable "lispLeastNegativeDoubleFloat" (agent)
  #.(->string least-negative-double-float))
(def-scalar-variable "lispLeastNegativeNormalizedDoubleFloat" (agent)
  #.(->string least-negative-normalized-double-float))
(def-scalar-variable "lispMostNegativeLongFloat" (agent)
  #.(->string most-negative-long-float))
(def-scalar-variable "lispLeastNegativeLongFloat" (agent)
  #.(->string least-negative-long-float))
(def-scalar-variable "lispLeastNegativeNormalizedLongFloat" (agent)
  #.(->string least-negative-normalized-long-float))
