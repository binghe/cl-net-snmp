;;;; -*- Mode: Lisp -*-
;;;; Auto-generated from MIB:NET-SNMP;UCD-SNMP-MIB-OLD.TXT

(in-package :asn.1)
(setf *current-module* 'ucd-snmp-mib-old)
(eval-when (:load-toplevel :execute)
  (pushnew 'ucd-snmp-mib-old *mib-modules*))
(deftype |Processes| () 't)
(defoid |processes| (|ucdavis| 1)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description "A set of information on running programs/daemons."))
(defoid |processIndex| (|processes| 1)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Reference Index for each observed process."))
(defoid |processNames| (|processes| 2)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description "The table of process names we're Counting."))
(defoid |processMin| (|processes| 3)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description
   "The minimum number of processes that should be
		running.  An error flag is generated if the number of
		running processes is < the minimum."))
(defoid |processMax| (|processes| 4)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description
   "The maximum number of processes that should be
		running.  An error flag is generated if the number of
		running processes is > the maximum."))
(defoid |processCount| (|processes| 5)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description
   "The number of current processes running with the name
		in question."))
(defoid |processErrorFlag| (|processes| 100)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description
   "A Error flag to indicate trouble with a process.  It
		goes to 1 if there is an error, 0 if no error."))
(defoid |processErrMessage| (|processes| 101)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description
   "An error message describing the problem (if one exists)."))
(defoid |processErrFix| (|processes| 102)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description
   "Setting this to one will try to fix the problem if possible."))
(defoid |extensible| (|ucdavis| 3)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description
   "Extensible commands returning output and result codes."))
(deftype |Extensible| () 't)
(defoid |extensibleIndex| (|extensible| 1)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Reference Index for extensible calls."))
(defoid |extensibleNames| (|extensible| 2)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description
   "Short, one name descriptions of the extensible commands."))
(defoid |extensibleCommand| (|extensible| 3)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description "The command line to be executed."))
(defoid |extensibleResult| (|extensible| 100)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "The result code from the executed command."))
(defoid |extensibleOutput| (|extensible| 101)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description
   "The output of the extensible command (top line only)."))
(defoid |extensibleErrFix| (|extensible| 102)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Set to 1 to fix the problem, if possible."))
(defoid |disk| (|ucdavis| 6)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description "Disk watching information."))
(deftype |Disk| () 't)
(defoid |diskIndex| (|disk| 1)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Reference number for the Disk Mib."))
(defoid |diskPath| (|disk| 2)
  (:type 'object-type)
  (:syntax '|DisplayString|)
  (:status '|mandatory|)
  (:description "Path where disk is mounted."))
(defoid |diskDevice| (|disk| 3)
  (:type 'object-type)
  (:syntax '|DisplayString|)
  (:status '|mandatory|)
  (:description "Device path"))
(defoid |diskMinimum| (|disk| 4)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Minimum space required on the disk."))
(defoid |diskMinPercent| (|disk| 5)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Minimum percentage of space required on the disk."))
(defoid |diskTotal| (|disk| 6)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Total Disk Size (kbytes)"))
(defoid |diskAvail| (|disk| 7)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Available disk Space"))
(defoid |diskUsed| (|disk| 8)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Used Space on Disk"))
(defoid |diskPercent| (|disk| 9)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Percentage of space used on disk"))
(defoid |diskErrorFlag| (|disk| 100)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description
   "Error flag signaling disk is over minimum required space"))
(defoid |diskErrorMsg| (|disk| 101)
  (:type 'object-type)
  (:syntax '|DisplayString|)
  (:status '|mandatory|)
  (:description
   "A text description of what caused the error flag to be set."))
(defoid |loadaves| (|ucdavis| 7)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description "Load average information."))
(deftype |Loadaves| () 't)
(defoid |loadaveIndex| (|loadaves| 1)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description "Reference Index for each observed loadave."))
(defoid |loadaveNames| (|loadaves| 2)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description "The list of loadave names we're Counting."))
(defoid |loadaveLoad| (|loadaves| 3)
  (:type 'object-type)
  (:syntax '|DisplayString|)
  (:status '|mandatory|)
  (:description "The 1,5 and 10 minute load averages."))
(defoid |loadaveConfig| (|loadaves| 4)
  (:type 'object-type)
  (:syntax '|DisplayString|)
  (:status '|mandatory|)
  (:description "The watch point for loadaverages to signal an error."))
(defoid |loadaveErrorFlag| (|loadaves| 100)
  (:type 'object-type)
  (:syntax ':integer)
  (:status '|mandatory|)
  (:description
   "A Error flag to indicate trouble with a loadave.  It
		goes to 1 if there is an error, 0 if no error."))
(defoid |loadaveErrMessage| (|loadaves| 101)
  (:type 'object-type)
  (:syntax 't)
  (:status '|mandatory|)
  (:description
   "An error message describing the problem (if one exists)."))
